// Code generated by protoc-gen-go.
// source: template.proto
// DO NOT EDIT!

/*
Package template is a generated protocol buffer package.

It is generated from these files:
	template.proto

It has these top-level messages:
	TemplateRequest
	TemplateResponse
*/
package template

import proto "github.com/golang/protobuf/proto"

// discarding unused import google_api1 "google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// The request message containing the user's name.
type TemplateRequest struct {
	// Unique integer identifier of the todo task
	Num int64 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (m *TemplateRequest) Reset()         { *m = TemplateRequest{} }
func (m *TemplateRequest) String() string { return proto.CompactTextString(m) }
func (*TemplateRequest) ProtoMessage()    {}

// The response message containing the greetings
type TemplateResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *TemplateResponse) Reset()         { *m = TemplateResponse{} }
func (m *TemplateResponse) String() string { return proto.CompactTextString(m) }
func (*TemplateResponse) ProtoMessage()    {}

func init() {
}

// Client API for Greeter service

type GreeterClient interface {
	// Sends a greeting
	SendGet(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error)
	SendPost(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SendGet(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error) {
	out := new(TemplateResponse)
	err := grpc.Invoke(ctx, "/template.Greeter/SendGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SendPost(ctx context.Context, in *TemplateRequest, opts ...grpc.CallOption) (*TemplateResponse, error) {
	out := new(TemplateResponse)
	err := grpc.Invoke(ctx, "/template.Greeter/SendPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// Sends a greeting
	SendGet(context.Context, *TemplateRequest) (*TemplateResponse, error)
	SendPost(context.Context, *TemplateRequest) (*TemplateResponse, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SendGet_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(TemplateRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GreeterServer).SendGet(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Greeter_SendPost_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(TemplateRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GreeterServer).SendPost(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "template.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendGet",
			Handler:    _Greeter_SendGet_Handler,
		},
		{
			MethodName: "SendPost",
			Handler:    _Greeter_SendPost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
